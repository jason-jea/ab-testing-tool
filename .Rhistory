shiny::runApp()
shiny::runApp()
createQueryData <- function(counter, dimensiontype) {
n <- counter
inputIndeces <- which(grepl(dimensiontype,names(input)))
inputNames <- names(input)[grepl(dimensiontype,names(input))]
inputCategories <- unique(substr(names(input)[grepl(dimensiontype,names(input))], start = 0,
stop = regexpr("_in",names(input)[grepl(dimensiontype,names(input))]) - 1))
querydata <- data.frame(t(aaply(inputCategories,1, function(z) {
inputCategoryIndeces <- which(grepl(z,names(input)[grepl(dimensiontype,names(input))]) &
grepl("_",substr(names(input)[grepl(dimensiontype,names(input))],
start = nchar(z)+ 1, stop = nchar(z) + 1)))
aaply(inputCategoryIndeces, 1, function(x) {as.character(input[[x]])})
})))
colnames(querydata) <- inputCategories
return(querydata)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
createQueryData <- function(dimensiontype, input) {
inputIndeces <- which(grepl(dimensiontype,names(input)))
inputNames <- names(input)[grepl(dimensiontype,names(input))]
inputCategories <- unique(substr(names(input)[grepl(dimensiontype,names(input))], start = 0,
stop = regexpr("_in",names(input)[grepl(dimensiontype,names(input))]) - 1))
querydata <- data.frame(t(aaply(inputCategories,1, function(z) {
inputCategoryIndeces <- which(grepl(z,names(input)[grepl(dimensiontype,names(input))]) &
grepl("_",substr(names(input)[grepl(dimensiontype,names(input))],
start = nchar(z)+ 1, stop = nchar(z) + 1)))
aaply(inputCategoryIndeces, 1, function(x) {as.character(input[[x]])})
})))
colnames(querydata) <- inputCategories
return(querydata)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
createQueryData <- function(dimensiontype) {
inputIndeces <- which(grepl(dimensiontype,names(input)))
inputNames <- names(input)[grepl(dimensiontype,names(input))]
inputCategories <- unique(substr(names(input)[grepl(dimensiontype,names(input))], start = 0,
stop = regexpr("_in",names(input)[grepl(dimensiontype,names(input))]) - 1))
querydata <- data.frame(t(aaply(inputCategories,1, function(z) {
inputCategoryIndeces <- which(grepl(z,names(input)[grepl(dimensiontype,names(input))]) &
grepl("_",substr(names(input)[grepl(dimensiontype,names(input))],
start = nchar(z)+ 1, stop = nchar(z) + 1)))
aaply(inputCategoryIndeces, 1, function(x) {as.character(input[[x]])})
})))
colnames(querydata) <- inputCategories
return(querydata)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
createQueryData <- function(input, dimensiontype) {
inputIndeces <- which(grepl(dimensiontype,names(input)))
inputNames <- names(input)[grepl(dimensiontype,names(input))]
inputCategories <- unique(substr(names(input)[grepl(dimensiontype,names(input))], start = 0,
stop = regexpr("_in",names(input)[grepl(dimensiontype,names(input))]) - 1))
querydata <- data.frame(t(aaply(inputCategories,1, function(z) {
inputCategoryIndeces <- which(grepl(z,names(input)[grepl(dimensiontype,names(input))]) &
grepl("_",substr(names(input)[grepl(dimensiontype,names(input))],
start = nchar(z)+ 1, stop = nchar(z) + 1)))
aaply(inputCategoryIndeces, 1, function(x) {as.character(input[[x]])})
})))
colnames(querydata) <- inputCategories
return(querydata)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(createQueryData)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
testllist[[1]]
testlist[[1]]
as.character(testlist[[1]])
paste(as.character(testlist[[1]]),collapse="",sep="")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?daply
dimensiontype = "domain"
input = testlist
inputIndeces <- which(grepl(dimensiontype,names(input)))
inputNames <- names(input)[grepl(dimensiontype,names(input))]
inputCategories <- unique(substr(names(input)[grepl(dimensiontype,names(input))], start = 0,
stop = regexpr("_in",names(input)[grepl(dimensiontype,names(input))]) - 1))
inputData <- data.frame(cbind(inputNames,
categories = substr(inputNames[grepl(dimensiontype,inputNames)], start = 0,
stop = regexpr("_in",inputNames[grepl(dimensiontype,inputNames)]) - 1)))
inputData
querydata <- data.frame(t(aaply(inputCategories,1, function(z) {
inputCategoryIndeces <- which(grepl(z,names(input)[grepl(dimensiontype,names(input))]) &
grepl("_",substr(names(input)[grepl(dimensiontype,names(input))],
start = nchar(z)+ 1, stop = nchar(z) + 1)))
aaply(inputData[inputData$categories == z,"inputNames"], 1, function(x) {as.character(input[[x]])})
})))
inputData[inputData$categories == z,"inputNames"]
inputData[inputData$categories == "domain","inputNames"]
as.character(inputData[inputData$categories == "domain","inputNames"])
aaply(as.character(inputData[inputData$categories == "domain","inputNames"]), 1, function(x) {as.character(input[[x]])})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(input)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
paste(c("macys","jcp"),collapes="",sep="','")
paste(c("macys","jcp"),collapse="",sep="','")
paste(c("macys","jcp"),collapse="','",sep="','")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?dbGetQuery
shiny::runApp()
shiny::runApp()
rm(redshift)
shiny::runApp()
shiny::runApp()
shiny::runApp()
redshift = dbConnect(drv, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
dbGetQuery(redshift,"with t1 as (select channelid,sum(case when domain in ('1000bulbs.com') then .7 else .3 end * affinity_score) as affinity_score from bi_work.merchant_affinity_push where (domain= '1000bulbs.com' and affinity_score > 0)group by 1) select channelid from t1 where affinity_score >=0.73")
drv <- dbDriver("PostgreSQL")
redshift = dbConnect(drv, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
finaldata <- dbGetQuery(redshift,"with t1 as (select channelid,sum(case when domain in ('1000bulbs.com') then .7 else .3 end * affinity_score) as affinity_score from bi_work.merchant_affinity_push where (domain= '1000bulbs.com' and affinity_score > 0)group by 1) select channelid from t1 where affinity_score >=0.73")
rm(finaldata)
rm(redshift)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(finaldata)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(finaldata)
shiny::runApp()
redshift = dbConnect(drv, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
dbGetQuery(redshift,"insert into bi_work.test with t1 as (select channelid,sum(case when domain in ('1000bulbs.com') then .7 else .3 end * affinity_score) as affinity_score from bi_work.merchant_affinity_push where (domain= '1000bulbs.com' and affinity_score > 0)group by 1) select channelid from t1 where affinity_score >=0.73")
rm(redshift)
shiny::runApp()
rm(finaldata)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(testquerydata)
'"'
'""'
"''"
recipeBuilder <- function(dimensiontype, affinity.data, input) {
recipes_firstlevel <-
aaply(c(1:(n+1)), function(x) {
domain <- as.character(affinity.data[x,dimensiontype])
paste0("name:recipe", x, ", ingredient:{source:merchant_affinity_push_v01, sourcetype:abacus_dataset,
dimension:domain",", threshold:",domain, ", operator:", "=}, output:{channnelid, affinity_score}")
})
threshold <- as.numeric(levels(affinity.data[x,"domainthreshold"]))[affinity.data[x,"domainthreshold"]]
ingredients <-
paste(
aaply(c(1:(n+1)), function(x) {
weight <- ifelse(as.character(affinity.data[x,paste0(dimensiontype,"type")]) == "Primary", .7, .3)
criteria <- 0
paste0("ingredient:{source:recipe",x,", sourcetype:intersect_recipe}")
}), collapse=", ", sep="")
paste0("name:push_affinity, ",ingredients, ", dimension:affinity_score", ", threshold:", threshold,
", operator:>=", ", output:{channelid}")
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?Tar
?tar
tar("test",files=c("testdata","testquerydata"))
tar("test.tar",files=c("testdata","testquerydata"))
?zip
zip("test.tar",files=c("testdata","testquerydata"))
zip("test",files=c("testdata","testquerydata"))
write.csv(testdata,"test1.csv")
write.csv(testdata,test2.csv"")
write.csv(testdata,"test2.csv")
zip(zipfile="test.zip",files = c("test1.csv","test2.csv"))
which zip()
which zip
?Rtools
?rtools
install.packages("Rtools")
zip(zipfile="test.zip",files = c("test1.csv","test2.csv"))
library(Rtools)
library(RBuildTools)
zip(zipfile="test.zip",files = c("test1.csv","test2.csv"))
zip("test.zip",c("test1.csv","test2.csv"))
shiny::runApp()
shiny::runApp()
aaply(c(1:1), 1, function(i) {
write.csv(dbGetQuery(redshift,paste0("select * from bi_work.test where segment = ",i)), paste0("asdfasdfdas",i,".csv"))
paste0("asdfasdfdas",i,".csv")
})
aaply(c(1:1), 1, function(i) {
write.csv(dbGetQuery(redshift,paste0("select * from bi_work.test where segment = ",i)), paste0("asdfasdfdas",i,".csv"))
paste0("asdfasdfdas",i,".csv")
})
if (!exists("redshift")) {
redshift <- dbConnect(drv, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
}
drv <- dbDriver("PostgreSQL")
if (!exists("redshift")) {
redshift <- dbConnect(drv, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
}
aaply(c(1:1), 1, function(i) {
write.csv(dbGetQuery(redshift,paste0("select * from bi_work.test where segment = ",i)), paste0("asdfasdfdas",i,".csv"))
paste0("asdfasdfdas",i,".csv")
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
wd()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
paste0("asdfs",".zip")
shiny::runApp()
file.exists("asdfasf.zip")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?zip
shiny::runApp()
shiny::runApp()
shiny::runApp()
file
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
file
?file
shiny::runApp()
filenames <-
aaply(c(1:1), 1, function(i) {
write.csv(dbGetQuery(redshift,paste0("select * from bi_work.test where segment = ",i)), paste0("input$campaignname",i,".csv"))
paste0("input$campaignname",i,".csv")
})
zip("ase45asefasd.zip", filenames)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?zip
zip("C:\Users\jjea\AppData\Local\Temp\RtmpAr55OM\adsfs.zip",c("why1.csv","why2.csv"))
zip("C:/Users/jjea/AppData/Local/Temp/RtmpAr55OM/adsfs.zip",c("why1.csv","why2.csv"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
library(survival)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(RODBC)
library(RJDBC)
library(RPostgreSQL)
library(tidyr)
library(lubridate)
library(rmarkdown)
library(scales)
library(RColorBrewer)
library(stringr)
library(httr)
library(RCurl)
library(httr)
library(readr)
createQueryData <- function(dimensiontype,input) {
inputIndeces <- which(grepl(dimensiontype,names(input)) & grepl("_",names(input)))
inputNames <- names(input)[grepl(dimensiontype,names(input)) & grepl("_",names(input))]
inputCategories <- unique(substr(names(input)[grepl(dimensiontype,names(input)) & grepl("_",names(input))], start = 0,
stop = regexpr("_in",names(input)[grepl(dimensiontype,names(input)) & grepl("_",names(input))]) - 1))
inputData <- data.frame(cbind(inputNames,
categories = substr(inputNames[grepl(dimensiontype,inputNames)], start = 0,
stop = regexpr("_in",inputNames[grepl(dimensiontype,inputNames)]) - 1)))
querydata <- data.frame(t(aaply(inputCategories,1, function(z) {
inputCategoryIndeces <- which(grepl(z,names(input)[grepl(dimensiontype,names(input)) & grepl("_",names(input))]) &
grepl("_",substr(names(input)[grepl(dimensiontype,names(input)) & grepl("_",names(input))],
start = nchar(z)+ 1, stop = nchar(z) + 1)))
aaply(as.character(inputData[inputData$categories == z,"inputNames"]), 1, function(x) {as.character(input[[x]])})
})))
colnames(querydata) <- inputCategories
return(querydata)
}
affinityQuery <- function(counter, dimensiontype, affinity.data, input) {
n <- counter
if (n == 0) {
domaintext <- paste0("(", dimensiontype, "= '",
as.character(affinity.data[,dimensiontype])[1],
"' and affinity_score > 0)")
}
else {
for (i in 0:(n)) {
if (i == 0) {
domaintext <- paste0("(", dimensiontype, "= '",
as.character(affinity.data[,dimensiontype])[i+1],
"' and affinity_score > 0) or ")
}
else if (i < (n)) {
domaintext <- paste0(domaintext," (", dimensiontype, "= '",
as.character(affinity.data[,dimensiontype])[i+1],
"' and affinity_score > 0) or")
}
else {
domaintext <- paste0(domaintext," (", dimensiontype, "= '",
as.character(affinity.data[,dimensiontype])[i+1],
"' and affinity_score > 0)")
}
}
}
query <- paste0("with t1 as (select channelid,sum(case when domain in ('",
paste(as.character(affinity.data[as.character(affinity.data[,paste0(dimensiontype,"type")]) == "Primary",dimensiontype]),
collapse = "','", sep = ""),
"') then .7 else .3 end * affinity_score) as affinity_score from bi_work.merchant_affinity_push where ",
domaintext, "group by 1) select channelid from t1 where affinity_score >=",
input[[paste0(dimensiontype,"threshold")]])
return(query)
}
recipeBuilder <- function(counter, dimensiontype, affinity.data, input) {
n <- counter
recipes_firstlevel <-
aaply(c(1:(n+1)), 1, function(x) {
domain <- as.character(affinity.data[x,dimensiontype])
paste0("name:recipe", x, ", ingredient:{source:merchant_affinity_push_v01, sourcetype:abacus_dataset,
dimension:domain",", threshold:",domain, ", operator:", "=}, output:{channnelid, affinity_score}")
})
threshold <- input$domainthreshold
ingredients <-
paste(
aaply(c(1:(n+1)), 1, function(x) {
weight <- ifelse(as.character(affinity.data[x,paste0(dimensiontype,"type")]) == "Primary", .7, .3)
criteria <- 0
paste0("ingredient:{source:recipe",x,", sourcetype:intersect_recipe}")
}), collapse=", ", sep="")
recipes_secondlevel <-
paste0("name:push_affinity, ",ingredients, ", dimension:affinity_score", ", threshold:", threshold,
", operator:>=", ", output:{channelid}")
return(t(c(recipes_firstlevel,recipes_secondlevel)))
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
shiny::runApp()
getWd
getWd()
getwd()
shiny::runApp()
runApp("AB Testing Tool")
runApp()
shiny::runApp()
runApp(...,port="1234","0.0.0.0")
runApp("",port="1234","0.0.0.0")
runApp(getwd,port="1234","0.0.0.0")
runApp(getwd(),port="1234","0.0.0.0")
runApp(getwd(),port="8080","0.0.0.0")
shiny::runApp()
shiny::runApp()
shiny::runApp()
?clusterEvalQ
dbDisconnect(redshift)
dbDisconnect("redshift")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
function() {paste0(input$campignname,".zip")}
paste0(input$campignname,".zip")
shiny::runApp()
paste0(input$campaignname,".zip")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dbDisconnect(redshift)
?"dbDisconnect,PostgreSQLConnection-method"
dbDisconnect(drv,redshift)
dbDisconnect(drv,redshift, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
dbDisconnect(redshift)
redshift <- dbConnect(drv, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
dbDriver("PostgreSQL")
redshift <- dbConnect(drv, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
drv <- dbDriver("PostgreSQL")
redshift <- dbConnect(drv, host = 'rsh-rpt-se1-dat-rdb-mem-prd.c2vtvr6b5gso.us-east-1.redshift.amazonaws.com', dbname = 'members',user = "rmn_jjea", password = "182493Superman.",port='5439')
dbListConnections(MySQL())
dbListConnections(redshift)
dbListConnections(drv)
for (con in dbListConnections(drv)) dbDisconnectcontent())
for (con in dbListConnections(drv)) dbDisconnect(con)
for (con in dbListConnections(drv)
con in dbListConnections(drv)
dbListConnections(drv)
shiny::runApp()
